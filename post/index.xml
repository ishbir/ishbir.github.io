<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Ishbir&#39;s Blog</title>
    <link>https://www.ishbir.com/post/</link>
    <description>Recent content in Posts on Ishbir&#39;s Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 14 Aug 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://www.ishbir.com/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Futures in Rust</title>
      <link>https://www.ishbir.com/post/2016-08-14-futures-in-rust/</link>
      <pubDate>Sun, 14 Aug 2016 00:00:00 +0000</pubDate>
      <guid>https://www.ishbir.com/post/2016-08-14-futures-in-rust/</guid>
      <description>&lt;p&gt;I stumbled upon &lt;a href=&#34;https://www.rust-lang.org&#34;&gt;Rust&lt;/a&gt; a few months ago but didn&amp;rsquo;t really bother to&#xA;learn it. The ecosystem was tiny, the language seemed to be of little practical use and it was&#xA;bothersome to get my head around its quirks like borrowing and lifetimes.&lt;/p&gt;&#xA;&lt;p&gt;But things have changed. With growing interest and a fast-evolving ecosystem, the language is&#xA;impossible to ignore. Go&amp;rsquo;s goroutines and Scala&amp;rsquo;s &lt;code&gt;Future&lt;/code&gt;s had really spoiled me and I really&#xA;needed something similar. Then I stumbled upon &lt;a href=&#34;https://github.com/alexcrichton/futures-rs/&#34;&gt;futures&lt;/a&gt;,&#xA;a zero-cost futures and streams Rust library. And I thought of making a simple async web API&#xA;wrapper as my first Rust project and a blog post to go along as a tutorial.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wrapping a C library in C&#43;&#43;</title>
      <link>https://www.ishbir.com/post/2016-06-09-wrapping-a-c-library-in-c&#43;&#43;/</link>
      <pubDate>Thu, 09 Jun 2016 00:00:00 +0000</pubDate>
      <guid>https://www.ishbir.com/post/2016-06-09-wrapping-a-c-library-in-c&#43;&#43;/</guid>
      <description>&lt;p&gt;Lots of libraries offer interfaces in C mainly to be universally callable from&#xA;any programming language. This is absolutely fantastic! It lets any language&#xA;with a FFI (Foreign Function Interface) to hook into and use a large number of&#xA;C libraries. But the downsides? The code is verbose, memory needs to be manually&#xA;managed and it&amp;rsquo;s really easy to forget the crucial bits.&lt;/p&gt;&#xA;&lt;p&gt;C++, being extremely close to C, can easily call into a C library if needed.&#xA;And the vice-verse is also true if &lt;code&gt;extern &amp;quot;C&amp;quot;&lt;/code&gt; is used (instruct the compiler&#xA;to not mangle function names). So, should you even go through the trouble of&#xA;wrapping it in C++? If so, what&amp;rsquo;s a good way to do it? This post explores these&#xA;questions and offers an insight into the hell called cross-language&#xA;interoperability.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
